/**
 * JJTree file
 * reference: http://opensource.adobe.com/svn/opensource/blazeds/branches/4.6.x/modules/core/src/flex/messaging/services/messaging/selector/SQLParser.jj
 */
options
{
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
  STATIC = false;
  UNICODE_INPUT = true;
  
}

PARSER_BEGIN(SQL_parser)
package parser;

public class SQL_parser{}

PARSER_END(SQL_parser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}


/* KEYWORDS */
TOKEN :
{
  < CREATE_TABLE: "create table" >
| < INSERT_INTO: "insert into" >
| < VALUES: "values" >
| < SELECT: "select" >
| < FROM: "from" >
| < WHERE: "where" >
| < COUNT: "count" >
| < SUM: "sum" >
| <PERIOD:"." >
| < AS : "as" >
}

/* DATA TYPE */
TOKEN :
{
  < INT: "int" >
| < VARCHAR: "varchar" >
| < PRIMARY_KEY: "primary key" >
| < SQL_String:  "'" (["@","%","^","&","*","(",")","+","=","~","!","?","/",">","<",".",",",";","[","]","#","}","{","$","-"," ", "0"-"9", "A"-"Z", "_", "a"-"z"]
					| [":"]

)* "'">
}

//"!"]|["#"]|["%"]|["&"]|["("]|[")"]|["+"]|["."]"?","@","\","^","`",
/* SEPARATORS */
TOKEN :
{
  < SEMICOLON: ";" >
| < COMMA: "," >
| < L_PAREN: "(" >
| < R_PAREN: ")" >
| < ASTERISK: "*" >
| < LT: "<" >
| < GT: ">" >
| < EQ: "=" >
| < NE: "<>" >
}

/* LOGICAL SEPARATORS */
TOKEN :
{
  < AND: "and" >
| < OR: "or" >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

/* Integer */
TOKEN :
{
    < INTEGER_LITERAL : "0" | ["-","0"-"9"] (["0"-"9"])* >

}



/**************************************
 *           NONTERMINALS             *
 **************************************/



SimpleNode SqlScript() :
{}
{
(  
  LOOKAHEAD(SqlOperator() <SEMICOLON> )
(
   SqlOperator() (LOOKAHEAD(2) <SEMICOLON> SqlOperator())* [<SEMICOLON>]
)
| 
  (
    SqlOperator()
  )
)
  ("#"|<EOF >)
  { return jjtThis; }
}

void SqlOperator() :
{}
{
  Create()
|
  Insert()
|
  Query()
}

void Create() :
{Token tableName;}
{
  < CREATE_TABLE > tableName=<IDENTIFIER > <L_PAREN > Attri_List() <R_PAREN >
    { jjtThis.jjtSetValue( tableName.image );}
}

void Attri_List() :
{}
{
    Attri_List_Unit()(< COMMA >  Attri_List_Unit() )*
}

void Attri_List_Unit() :
{Token attriName;
}
{
   attriName= <IDENTIFIER >
   (
     Attri_int()
 |
   Attri_vchar())
   {
     jjtThis.jjtSetValue( attriName.image );
   }
}

void Attri_int() :
{ Token attriType;
 Token primary=null;
 }
{
    attriType=<INT > [ primary=<PRIMARY_KEY >]
    {
       if(primary==null)
         jjtThis.jjtSetValue( attriType.image );
       else
         jjtThis.jjtSetValue( attriType.image+" "+primary.image );
    }
}

void Attri_vchar() :
{Token attriType;
 Token length;
 Token primary=null;}
{
    attriType=<VARCHAR > <L_PAREN > length=<INTEGER_LITERAL> <R_PAREN >  [primary=<PRIMARY_KEY >]
    {
       if(primary==null)
         jjtThis.jjtSetValue( attriType.image+" "+length.image );
       else
         jjtThis.jjtSetValue( attriType.image+" "+length.image+" "+primary.image );
    }
}

//-----------------------------Query-----------------------
void Query() :
{}
{
	 <SELECT> QueryList() FromList() [ WhereClause() ]

}

void QueryList():
{
   Token Variable=null;
}
{
   ( Variable=<ASTERISK> | SelectList() |Count() |Sum() )
   {
     if(Variable==null)
     {
     }
     else
       jjtThis.jjtSetValue( Variable.image );
   }
}

void SelectList() :
{}
{
   SelectExpression()
    ( <COMMA> SelectExpression() )*
}

void SelectExpression() :
{
 Token t1=null;
} 
{
   LOOKAHEAD( Alis())
     ( Alis()  )
 |   LOOKAHEAD( Alis_AST())
    (Alis_AST() )
|
  t1= <IDENTIFIER >

 {
   if (t1==null)
   {
	
   }else
      jjtThis.jjtSetValue(t1.image);
  
 }
}

void Alis_AST():
{
  
}
{
  AlisL() <PERIOD> <ASTERISK>
}

void FromList() :
{}
{
    < FROM >
    FromListUnit()
       ( <COMMA> FromListUnit())*
}

void FromListUnit():
{
  Token t1;
  Token t2=null;
}
{
   t1=<IDENTIFIER >  [( < AS > t2=<IDENTIFIER >)]
   {
     
   if(t2==null)
   {
      jjtThis.jjtSetValue(t1.image);
   }
 	else
	{
		 jjtThis.jjtSetValue(t1.image+" "+ t2.image);
	 }
}
    
}

void WhereClause() :
{
Token t=null;
  }
{
 < WHERE >
 (
   LOOKAHEAD(SearchCond() (< AND >|< OR >) )
     SearchCond() (t=< AND >|t=< OR >) SearchCond()
|
   SearchCond()
 )
 {
	if(t==null)
	{
	}
	else
	    jjtThis.jjtSetValue(t.image);
 }
}

void SearchCond():
{
  Token t=null;
}
{
  OPLeftHandSide() (t=< EQ >|t=< NE >|t=< LT >|t=< GT >) OPRightHandSide()
  {

    jjtThis.jjtSetValue(t.image);
  }
    
}

void OPLeftHandSide():
{
  Token t=null;
}
{
   LOOKAHEAD(<IDENTIFIER ><PERIOD>)
    Alis()
|
  t= <IDENTIFIER >
    {
	if(t==null)
	{
	}
	else
	    jjtThis.jjtSetValue(t.image);
 }
}

void OPRightHandSide():
{Token t=null;
 
}
{
   (
     LOOKAHEAD(<IDENTIFIER ><PERIOD>)
    Alis()
  | t=<IDENTIFIER >
  | t=< SQL_String >
  |t=<INTEGER_LITERAL>
  )
  {
	if(t==null)
	{
	}
	else
	    jjtThis.jjtSetValue(t.image);
 }
}

void Alis():
{
}
{
  AlisL() <PERIOD> AlisR()
}
void AlisL():
{
  Token t;
}
{
  t=<IDENTIFIER >
  {
    jjtThis.jjtSetValue( t.image );
  }
  
  
}
void AlisR():
{
  Token t;
}
{
  t=<IDENTIFIER >
  {
    
    jjtThis.jjtSetValue( t.image );
  }
}

void Count() :
{
  Token Variable=null;
}
{
  < COUNT ><L_PAREN> (
    LOOKAHEAD(<IDENTIFIER ><PERIOD>)
       Alis()
  |Variable=<ASTERISK>
  |Variable=<IDENTIFIER >
   )
  <R_PAREN >
  {
    if(Variable==null)
    {
    }
    else
    	jjtThis.jjtSetValue( Variable.image );
  }
}

void Sum() :
{Token Variable=null;}
{
  < SUM ><L_PAREN>
  (
    
  LOOKAHEAD(<IDENTIFIER ><PERIOD>)
	 Alis()
| Variable=<IDENTIFIER >
)
<R_PAREN >
{
  
	if(Variable==null)
	{
	}else
  {
    jjtThis.jjtSetValue( Variable.image );
  }
}
  
}


//----------------------------Insert-------------------------------
/*
 insert-statement ::=

     INSERT INTO table-name [( column-identifier [, column-identifier]...)]      VALUES (insert-value[, insert-value]... )
 */
void Insert() :
{Token tableName;}
{
   < INSERT_INTO > tableName=<IDENTIFIER > [Column_identifier_list()] <VALUES > insert_value_list()
    { jjtThis.jjtSetValue( tableName.image );}
}

void Column_identifier_list() :
{}
{
    < L_PAREN> Column_identifier() [(<COMMA > Column_identifier() )+] <R_PAREN >
}

void Column_identifier() :
{Token insert_attri_name;}
{
   insert_attri_name=< IDENTIFIER >
   { jjtThis.jjtSetValue( insert_attri_name.image );}
}

void insert_value_list() :
{}
{
    < L_PAREN>  insert_value() [(<COMMA > insert_value())+] <R_PAREN >
}

void insert_value():
{Token insert_int;}
{
   insert_value_string()
 |
   insert_int=<INTEGER_LITERAL>
   { jjtThis.jjtSetValue(  insert_int.image );}
}

void insert_value_string():
{Token insert_str;}
{
    insert_str=<  SQL_String >
     { jjtThis.jjtSetValue(  insert_str.image );}
}

///*
///*
//// ##############################################################
//
///*
//<query> ::=
//	SELECT
//	[ ALL | DISTINCT ] { <select list> | <asterisk> }
//	[ <from list>
//		[ <where clause> ]
//		[ <group by clause> ]
//		[ <having clause> ]
//		[ <order by clause> ]
//		[ <limit clause> ]
//	]
//*/
//void Query() :
//{}
//{
//  <SELECT>
//  [ <ALL> | <DISTINCT> ]
//  ( <ASTERISK> | SelectList() )
//  [ FromList()
//    [ WhereClause() ]
//    [ GroupByClause() ]
//    [ HavingClause() ]
//    [ OrderByClause() ]
//    [ LimitClause() ]
//  ]
//}
//
///*
//<select list> ::=
//	<select expression>
//	<select list rest>
//
//<select list rest> ::=
//	[ <comma> <select expression>
//	<select list rest> ]
//*/
//
//void SelectList() :
//{}
//{
//    SelectExpression()
//    ( <COMMA> SelectExpression() )*
//}
//
///*
//<select expression> ::=
//	  <relation spec> <period> <asterisk>
//	| <value expression> [ [ AS ] <alias> ]
//*/
//
//void SelectExpression() :
//{}
//{   
//    (   /* This looks ugly but I haven't found a better way to make it work. */
//        LOOKAHEAD(5) RelationName() <PERIOD> <ASTERISK>
//    |   LOOKAHEAD(5) SchemaName() <PERIOD> RelationName() <PERIOD> <ASTERISK>
//    |   ValueExpression() [ LOOKAHEAD(2) [ <AS> ] Alias() ]
//    )
//}
//
///*
//<from list> ::=
//        FROM
//	<from list expression>
//	<from list rest>
//
//<from list rest> ::=
//	[ <comma> <from list expression>
//	<from list rest> ]
//*/
//
//void FromList() :
//{}
//{
//    <FROM>
//    FromListExpression()
//    ( <COMMA> FromListExpression() )*
//}
//
///*
//
//<from list expression> ::=
//	  <relation> [ <joined relations> ]
//*/
//
//void FromListExpression() :
//{}
//{
//    Relation() ( LOOKAHEAD(2) JoinClause() )*
//}
//
///*
//<relation> ::=
//	  <single relation>
//	| <named subquery>
//*/
//
//void Relation() :
//{}
//{
//        SingleRelation()
//    |   NamedSubquery()
//}
//
///*
//<named subquery> ::=
//	<subquery> [ [ AS ] <alias> ]
//*/
//
//void NamedSubquery() :
//{}
//{
//    Subquery() [ LOOKAHEAD(2) [ <AS> ] Alias() ]
//}
//
///*
//<subquery> ::=
//	<left paren> <query> <right paren>
//*/
//
//void Subquery() :
//{}
//{
//    <L_PAREN>
//    Query()
//    <R_PAREN>
//}
//
///*
//<single relation> ::=
//	<relation spec> [ [ AS ] <alias> ]
//*/
//
//void SingleRelation() :
//{}
//{
//    RelationSpec() [ LOOKAHEAD(2) [ <AS> ] Alias() ]
//}
//
///*
//<relation spec> ::= [ <schema name> <period> ] <relation name>
//*/
//
//void RelationSpec() :
//{}
//{
//    [ LOOKAHEAD(2) SchemaName() <PERIOD> ] RelationName()
//}
//
///*
//<schema name> ::= <identifier>
//*/
//
//void SchemaName() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<relation name> ::= <identifier>
//*/
//
//void RelationName() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<join clause> ::=
//	  <inner join spec> <on clause>
//	| <outer join spec> <on clause>
//	| <cross join spec>
//*/
//
//void JoinClause() :
//{}
//{
//        InnerJoinSpec() OnClause()
//    |   OuterJoinSpec() OnClause()
//    |   CrossJoinSpec()
//}
//
///*
//<inner join spec> ::=
//	[ INNER ] JOIN <from list expression>
//*/
//
//void InnerJoinSpec() :
//{}
//{
//    [ <INNER> ] <JOIN> FromListExpression()
//}
//
///*
//<outer join spec> ::=
//	{ LEFT | RIGHT } [ OUTER ] JOIN <from list expression>
//*/
//
//void OuterJoinSpec() :
//{}
//{
//    ( <LEFT> | <RIGHT> ) [ <OUTER> ] <JOIN> FromListExpression()
//}
//
///*
//<cross join spec> ::=
//	CROSS JOIN <from list expression>
//*/
//
//void CrossJoinSpec() :
//{}
//{
//    <CROSS> <JOIN> FromListExpression()
//}
//
///*
//<on clause> ::=
//	ON <search condition>
//*/
//
//void OnClause() :
//{}
//{
//    <ON> SearchCondition()
//}
//
///*
//<where clause> ::=
//	WHERE <search condition>
//*/
//
//void WhereClause() :
//{}
//{
//    <WHERE> SearchCondition()
//}
//
///*
//<having clause> ::=
//	HAVING <search condition>
//*/
//
//void HavingClause() :
//{}
//{
//    <HAVING> SearchCondition()
//}
//
///*
//<group by clause> ::=
//	GROUP BY <group by list>
//*/
//
//void GroupByClause() :
//{}
//{
//    <GROUP> <BY> GroupByList()
//}
//
///*
//<group by list> ::=
//	<group by expression>
//	<group by list rest>
//
//<group by list rest> ::=
//	[ <comma> <group by expression>
//	<group by list rest> ]
//*/
//
//void GroupByList() :
//{}
//{
//    GroupByExpression()
//    ( <COMMA> GroupByExpression() )*
//}
//
///*
//<group by expression> ::= <value expression>
//*/
//
//void GroupByExpression() :
//{}
//{
//    ValueExpression()
//}
//
///*
//<order by clause> ::=
//	ORDER BY <order by list>
//*/
//
//void OrderByClause() :
//{}
//{
//    <ORDER> <BY> OrderByList()
//}
//
///*
//<order by list> ::=
//	<order by expression>
//	<order by list rest>
//
//<order by list rest> ::=
//	[ <comma> <order by expression>
//	<order by list rest> ]
//*/
//
//void OrderByList() :
//{}
//{
//    OrderByExpression()
//    ( <COMMA> OrderByExpression() )*
//}
//
///*
//<order by expression> ::= <value expression> [ ASC | DESC ]
//*/
//
//void OrderByExpression() :
//{}
//{
//    ValueExpression() [ <ASC> | <DESC> ]
//}
//
///*
//<limit clause> ::=
//	LIMIT <limit offset> [ <comma> <limit count> ]
//*/
//
//void LimitClause() :
//{}
//{
//    <LIMIT> LimitOffset() [ <COMMA> LimitCount() ]
//}
//
///*
//<limit offset> ::= <value expression>
//*/
//
//void LimitOffset() :
//{}
//{
//    ValueExpression()
//}
//
///*
//<limit count> ::= <value expression>
//*/
//
//void LimitCount() :
//{}
//{
//    ValueExpression()
//}
//
//// ##############################################################
//
///*
//<value expression> ::=
//	  <binary operator>
//	| <parenthesized expression>
//*/
//
///*
//void ValueExpression() :
//{}
//{
//        LOOKAHEAD(2) BinaryOperator()
//    |   ParenthesizedExpression()
//}
//*/
///*
//<binary operator> ::=
//	<operand expression>
//	<binary operator rest>
//
//<binary operator rest> ::=
//	[
//		{ <arithmetical operator>
//		| <equality test>
//		| <logical test>
//		| <null test>
//		| <between test> }
//		<binary operator rest>
//	]
//*/
//
//void ValueExpression() :
//{}
//{
//    OperandExpression()
//    (
//            ArithmeticalOperator()
//        |   EqualityTest()
//        |   LogicalTest()
//        |   NullTest()
//        |   BetweenTest()
//        |   InTest()
//    )*
//}
//
///*
//<arithmetical operator> ::=
//	{ <plus> | <minus> | <asterisk> | <slash> | <percent> | DIV | MOD }
//	<operand expression>
//*/
//
//void ArithmeticalOperator() :
//{}
//{
//    ( <PLUS> | <MINUS> | <ASTERISK> | <SLASH> | <PERCENT> | <DIV> | <MOD> )
//    OperandExpression()
//}
//
///*
//<equality test> ::=
//	{ <lt> | <gt> | <eq> | <lte> | <gte> | <ne> }
//	<operand expression>
//*/
//
//void EqualityTest() :
//{}
//{
//    ( <LT> | <GT> | <EQ> | <LTE> | <GTE> | <NE> )
//    OperandExpression()
//}
//
///*
//<logical test> ::=
//	{ LIKE | AND | OR | XOR }
//	<operand expression>
//*/
//
//void LogicalTest() :
//{}
//{
//    ( <LIKE> | <AND> | <OR> | <XOR> )
//    OperandExpression()
//}
//
///*
//<null test> ::=
//	IS [ NOT ] NULL
//*/
//
//void NullTest() :
//{}
//{
//    <IS> [ <NOT> ] <NULL>
//}
//
///*
//<between test> ::=
//	BETWEEN <operand expression>
//	AND <operand expression>
//*/
//
//void BetweenTest() :
//{}
//{
//    <BETWEEN> OperandExpression()
//    <AND> OperandExpression()
//}
//
///*
//<parenthesized expression> ::=
//	<left paren>
//	<value expression>
//	<right paren>
//*/
//
//void ParenthesizedExpression() :
//{}
//{
//    <L_PAREN> ValueExpression() <R_PAREN>
//}
//
///*
//<operand expression> ::=
//	  <unary operator>
//	| <unary operand>
//*/
//
//void OperandExpression() :
//{}
//{
//        UnaryOperator()
//    |   UnaryOperand()
//}
//
///*
//<unary operator> ::=
//	{ <exclamation> | NOT | <tilde> | <minus> }
//	<operand expression>
//*/
//
//void UnaryOperator() :
//{}
//{
//    ( <EXCLAMATION> | <NOT> | <TILDE> | <MINUS> | <PLUS> )
//    OperandExpression()
//}
//
///*
//<unary operand> ::=
//	  <function call>
//	| <subquery>
//	| <literal>
//	| <column expression>
//*/
//
//void UnaryOperand() :
//{}
//{
//        LOOKAHEAD(2) FunctionCall()
//    |   LOOKAHEAD(2) Subquery()
//    |   Literal()
//    |   ColumnExpression()
//    |   ParenthesizedExpression()
//}
//
///*
//<function call> ::=
//	  <ordinary function call>
//	| <aggregate function call>
//	| <built-in function call>
//*/
//
//void FunctionCall() :
//{}
//{
//        OrdinaryFunctionCall()
//    |   AggregateFunctionCall()
//    |   BuiltInFunctionCall()
//}
//
///*
//<ordinary function call> ::=
//	<function name>
//	<left paren> <arg list> <right paren>
//*/
//
//void OrdinaryFunctionCall() :
//{}
//{
//    FunctionName()
//    <L_PAREN> ArgList() <R_PAREN>
//}
//
///*
//<function name> ::= <identifier>
//*/
//
//void FunctionName() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<arg list> ::=
//	<argument>
//	<arg list rest>
//
//<arg list rest> ::=
//	[ <comma> <argument>
//	<arg list rest> ]
//*/
//
//void ArgList() :
//{}
//{
//    Argument()
//    ( <COMMA> Argument() )*
//}
//
///*
//<aggregate function call> ::=
//	{ MIN | MAX | COUNT | AVG | SUM | AGGREGATE <function name> }
//	<left paren> [ ALL | DISTINCT ] { ASTERISK | <argument> } <right paren>
//*/
//
//void AggregateFunctionCall() :
//{}
//{
//    ( <MIN> | <MAX> | <COUNT> | <AVG> | <SUM> | <AGGREGATE> FunctionName() )
//    <L_PAREN> [ <ALL> | <DISTINCT> ] ( <ASTERISK> | Argument() ) <R_PAREN>
//}
//
///*
//<built-in function call> ::=
//	  <cast call>
//	| <convert call>
//	| <exists call>
//	| <in call>
//	| <case call>
//*/
//
//void BuiltInFunctionCall() :
//{}
//{
//        CastCall()
//    |   ConvertCall()
//    |   ExistsCall()
//    |   CaseCall()
//}
//
///*
//<cast call> ::=
//	CAST <left paren>
//	<argument> AS <type>
//	<right paren>
//*/
//
//void CastCall() :
//{}
//{
//    <CAST> <L_PAREN>
//    Argument() <AS> Type()
//    <R_PAREN>
//}
//
///*
//<convert call> ::=
//	CONVERT <left paren>
//	<argument> <right paren>
//	USING <encoding name>
//*/
//
//void ConvertCall() :
//{}
//{
//    <CONVERT> <L_PAREN>
//    Argument()
//    <USING> EncodingName() <R_PAREN>
//}
//
///*
//<exists call> ::=
//	EXISTS <subquery>
//*/
//
//void ExistsCall() :
//{}
//{
//    <EXISTS> Subquery()
//}
//
///*
//<in call> ::=
//	IN { <subquery> | <left paren> <arg list> <right paren> }
//*/
//
//void InTest() :
//{}
//{
//    <IN> ( LOOKAHEAD(2) Subquery() | <L_PAREN> ArgList() <R_PAREN> )
//}
//
///*
//<case call> ::=
//	CASE { <simple case expression> | <searched case expression> } END
//*/
//
//void CaseCall() :
//{}
//{
//    <CASE>
//    (   SimpleCaseExpression()
//    |   SearchedCaseExpression()
//    ) <END>
//}
//
///*
//<simple case expression> ::=
//	<value expression>
//	<searched case expression>
//*/
//
//void SimpleCaseExpression() :
//{}
//{
//    ValueExpression()
//    SearchedCaseExpression()
//}
//
///*
//<searched case expression> ::=
//	<when clauses>
//	ELSE <default expression>
//*/
//
//void SearchedCaseExpression() :
//{}
//{
//    WhenClauses()
//    [ <ELSE> DefaultExpression() ]
//}
//
///*
//<when clauses> ::=
//	<when clause>
//	<when clauses rest>
//
//<when clauses rest> ::=
//	[ <when clause> ]
//*/
//
//void WhenClauses() :
//{}
//{
//    ( WhenClause() )+
//}
//
///*
//<when clause> ::=
//	WHEN <when test>
//	THEN <when option expression>
//*/
//
//void WhenClause() :
//{}
//{
//    <WHEN> WhenTest()
//    <THEN> WhenOptionExpression()
//}
//
///*
//<when test> ::= <value expression>
//*/
//
//void WhenTest() :
//{}
//{
//    ValueExpression()
//}
//
///*
//<when option expression> ::= <value expression>
//*/
//
//void WhenOptionExpression() :
//{}
//{
//    ValueExpression()
//}
//
//
///*
//<default expression> ::= <value expression>
//*/
//
//void DefaultExpression() :
//{}
//{
//    ValueExpression()
//}
//
///*
//<encoding name> ::= <identifier>
//*/
//
//void EncodingName() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<argument> ::= <value expression>
//*/
//
//void Argument() :
//{}
//{
//    ValueExpression()
//}
//
///*
//<column expression> ::=
//	  <fully-qualified column name>
//	| <qualified column name>
//	| <unqualified column name>
//*/
//
//void ColumnExpression() :
//{}
//{
//        LOOKAHEAD(4) FullyQualifiedColumnName()
//    |   LOOKAHEAD(2) QualifiedColumnName()
//    |   UnqualifiedColumnName()
//}
//
///*
//<fully-qualified column name> ::=
//	<schema name> <period> <relation name> <period> <column name>
//*/
//
//void FullyQualifiedColumnName() :
//{}
//{
//    SchemaName() <PERIOD> RelationName() <PERIOD> ColumnName()
//}
//
///*
//<qualified column name> ::=
//	<relation name or alias> <period> <column name>
//*/
//
//void QualifiedColumnName() :
//{}
//{
//    RelationNameOrAlias() <PERIOD> ColumnName()
//}
//
///*
//<relation name or alias> ::= <identifier>
//*/
//
//void RelationNameOrAlias() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<unqualified column name> ::= <column name>
//*/
//
//void UnqualifiedColumnName() :
//{}
//{
//    ColumnName()
//}
//
///*
//<column name> ::= <identifier>
//*/
//
//void ColumnName() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<alias> ::= <identifier>
//*/
//
//void Alias() :
//{}
//{
//    <IDENTIFIER>
//}
//
///*
//<search condition> ::= <value expression>
//*/
//
//void SearchCondition() :
//{}
//{
//    ValueExpression()
//}
//
//// ##############################################################
//
///*
//<literal> ::=
//	  <numeric or string literal>
//	| <boolean literal>
//	| <null literal>
//*/
//
//void Literal() :
//{}
//{
//        NumericOrStringLiteral()
//    |   BooleanLiteral()
//    |   NullLiteral()
//}
//
//void NumericOrStringLiteral() :
//{}
//{
//    <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | <STRING_LITERAL>
//}
//
///*
//<boolean literal> ::= TRUE | FALSE
//*/
//
//void BooleanLiteral() :
//{}
//{
//    <TRUE> | <FALSE>
//}
//
///*
//<null literal> ::= NULL
//*/
//
//void NullLiteral() :
//{}
//{
//    <NULL>
//}
//
//// ##############################################################
//
///*
//<type> ::=
//	  <numeric type>
//	| <string type>
//	| <boolean type>
//	| <datetime type>
//*/
//
//void Type() :
//{}
//{
//        NumericType()
//    |   StringType()
//    |   BooleanType()
//    |   DatetimeType()
//}
//
///*
//<numeric type> ::= TINYINT | SMALLINT | INT | INTEGER | BIGINT
//*/
//
//void NumericType() :
//{}
//{
//        <TINYINT>
//    |   <SMALLINT>
//    |   <INT>
//    |   <INTEGER>
//    |   <BIGINT>
//}
//
///*
//<string type> ::= CHAR | VARCHAR
//*/
//
//void StringType() :
//{}
//{
//    <CHAR> | <VARCHAR>
//}
//
///*
//<boolean type> ::= BOOLEAN
//*/
//
//void BooleanType() :
//{}
//{
//    <BOOLEAN>
//}
//
///*
//<datetime type> ::= DATE | TIME | DATETIME
//*/
//
//void DatetimeType() :
//{}
//{
//    <DATE> | <TIME> | <DATETIME>
//}
